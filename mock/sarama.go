// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/IBM/sarama (interfaces: ConsumerGroup,ConsumerGroupSession,ConsumerGroupClaim,SyncProducer)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/sarama.go -package=mock -mock_names=ConsumerGroup=ConsumerGroup,ConsumerGroupSession=ConsumerGroupSession,ConsumerGroupClaim=ConsumerGroupClaim,SyncProducer=SyncProducer github.com/IBM/sarama ConsumerGroup,ConsumerGroupSession,ConsumerGroupClaim,SyncProducer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
)

// ConsumerGroup is a mock of ConsumerGroup interface.
type ConsumerGroup struct {
	ctrl     *gomock.Controller
	recorder *ConsumerGroupMockRecorder
	isgomock struct{}
}

// ConsumerGroupMockRecorder is the mock recorder for ConsumerGroup.
type ConsumerGroupMockRecorder struct {
	mock *ConsumerGroup
}

// NewConsumerGroup creates a new mock instance.
func NewConsumerGroup(ctrl *gomock.Controller) *ConsumerGroup {
	mock := &ConsumerGroup{ctrl: ctrl}
	mock.recorder = &ConsumerGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConsumerGroup) EXPECT() *ConsumerGroupMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *ConsumerGroup) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *ConsumerGroupMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*ConsumerGroup)(nil).Close))
}

// Consume mocks base method.
func (m *ConsumerGroup) Consume(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *ConsumerGroupMockRecorder) Consume(ctx, topics, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*ConsumerGroup)(nil).Consume), ctx, topics, handler)
}

// Errors mocks base method.
func (m *ConsumerGroup) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *ConsumerGroupMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*ConsumerGroup)(nil).Errors))
}

// Pause mocks base method.
func (m *ConsumerGroup) Pause(partitions map[string][]int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause", partitions)
}

// Pause indicates an expected call of Pause.
func (mr *ConsumerGroupMockRecorder) Pause(partitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*ConsumerGroup)(nil).Pause), partitions)
}

// PauseAll mocks base method.
func (m *ConsumerGroup) PauseAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PauseAll")
}

// PauseAll indicates an expected call of PauseAll.
func (mr *ConsumerGroupMockRecorder) PauseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAll", reflect.TypeOf((*ConsumerGroup)(nil).PauseAll))
}

// Resume mocks base method.
func (m *ConsumerGroup) Resume(partitions map[string][]int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume", partitions)
}

// Resume indicates an expected call of Resume.
func (mr *ConsumerGroupMockRecorder) Resume(partitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*ConsumerGroup)(nil).Resume), partitions)
}

// ResumeAll mocks base method.
func (m *ConsumerGroup) ResumeAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResumeAll")
}

// ResumeAll indicates an expected call of ResumeAll.
func (mr *ConsumerGroupMockRecorder) ResumeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAll", reflect.TypeOf((*ConsumerGroup)(nil).ResumeAll))
}

// ConsumerGroupSession is a mock of ConsumerGroupSession interface.
type ConsumerGroupSession struct {
	ctrl     *gomock.Controller
	recorder *ConsumerGroupSessionMockRecorder
	isgomock struct{}
}

// ConsumerGroupSessionMockRecorder is the mock recorder for ConsumerGroupSession.
type ConsumerGroupSessionMockRecorder struct {
	mock *ConsumerGroupSession
}

// NewConsumerGroupSession creates a new mock instance.
func NewConsumerGroupSession(ctrl *gomock.Controller) *ConsumerGroupSession {
	mock := &ConsumerGroupSession{ctrl: ctrl}
	mock.recorder = &ConsumerGroupSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConsumerGroupSession) EXPECT() *ConsumerGroupSessionMockRecorder {
	return m.recorder
}

// Claims mocks base method.
func (m *ConsumerGroupSession) Claims() map[string][]int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claims")
	ret0, _ := ret[0].(map[string][]int32)
	return ret0
}

// Claims indicates an expected call of Claims.
func (mr *ConsumerGroupSessionMockRecorder) Claims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claims", reflect.TypeOf((*ConsumerGroupSession)(nil).Claims))
}

// Commit mocks base method.
func (m *ConsumerGroupSession) Commit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit")
}

// Commit indicates an expected call of Commit.
func (mr *ConsumerGroupSessionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*ConsumerGroupSession)(nil).Commit))
}

// Context mocks base method.
func (m *ConsumerGroupSession) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *ConsumerGroupSessionMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*ConsumerGroupSession)(nil).Context))
}

// GenerationID mocks base method.
func (m *ConsumerGroupSession) GenerationID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerationID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GenerationID indicates an expected call of GenerationID.
func (mr *ConsumerGroupSessionMockRecorder) GenerationID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerationID", reflect.TypeOf((*ConsumerGroupSession)(nil).GenerationID))
}

// MarkMessage mocks base method.
func (m *ConsumerGroupSession) MarkMessage(msg *sarama.ConsumerMessage, metadata string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkMessage", msg, metadata)
}

// MarkMessage indicates an expected call of MarkMessage.
func (mr *ConsumerGroupSessionMockRecorder) MarkMessage(msg, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessage", reflect.TypeOf((*ConsumerGroupSession)(nil).MarkMessage), msg, metadata)
}

// MarkOffset mocks base method.
func (m *ConsumerGroupSession) MarkOffset(topic string, partition int32, offset int64, metadata string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOffset", topic, partition, offset, metadata)
}

// MarkOffset indicates an expected call of MarkOffset.
func (mr *ConsumerGroupSessionMockRecorder) MarkOffset(topic, partition, offset, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*ConsumerGroupSession)(nil).MarkOffset), topic, partition, offset, metadata)
}

// MemberID mocks base method.
func (m *ConsumerGroupSession) MemberID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberID")
	ret0, _ := ret[0].(string)
	return ret0
}

// MemberID indicates an expected call of MemberID.
func (mr *ConsumerGroupSessionMockRecorder) MemberID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberID", reflect.TypeOf((*ConsumerGroupSession)(nil).MemberID))
}

// ResetOffset mocks base method.
func (m *ConsumerGroupSession) ResetOffset(topic string, partition int32, offset int64, metadata string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetOffset", topic, partition, offset, metadata)
}

// ResetOffset indicates an expected call of ResetOffset.
func (mr *ConsumerGroupSessionMockRecorder) ResetOffset(topic, partition, offset, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOffset", reflect.TypeOf((*ConsumerGroupSession)(nil).ResetOffset), topic, partition, offset, metadata)
}

// ConsumerGroupClaim is a mock of ConsumerGroupClaim interface.
type ConsumerGroupClaim struct {
	ctrl     *gomock.Controller
	recorder *ConsumerGroupClaimMockRecorder
	isgomock struct{}
}

// ConsumerGroupClaimMockRecorder is the mock recorder for ConsumerGroupClaim.
type ConsumerGroupClaimMockRecorder struct {
	mock *ConsumerGroupClaim
}

// NewConsumerGroupClaim creates a new mock instance.
func NewConsumerGroupClaim(ctrl *gomock.Controller) *ConsumerGroupClaim {
	mock := &ConsumerGroupClaim{ctrl: ctrl}
	mock.recorder = &ConsumerGroupClaimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConsumerGroupClaim) EXPECT() *ConsumerGroupClaimMockRecorder {
	return m.recorder
}

// HighWaterMarkOffset mocks base method.
func (m *ConsumerGroupClaim) HighWaterMarkOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighWaterMarkOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HighWaterMarkOffset indicates an expected call of HighWaterMarkOffset.
func (mr *ConsumerGroupClaimMockRecorder) HighWaterMarkOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighWaterMarkOffset", reflect.TypeOf((*ConsumerGroupClaim)(nil).HighWaterMarkOffset))
}

// InitialOffset mocks base method.
func (m *ConsumerGroupClaim) InitialOffset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialOffset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// InitialOffset indicates an expected call of InitialOffset.
func (mr *ConsumerGroupClaimMockRecorder) InitialOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialOffset", reflect.TypeOf((*ConsumerGroupClaim)(nil).InitialOffset))
}

// Messages mocks base method.
func (m *ConsumerGroupClaim) Messages() <-chan *sarama.ConsumerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerMessage)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *ConsumerGroupClaimMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*ConsumerGroupClaim)(nil).Messages))
}

// Partition mocks base method.
func (m *ConsumerGroupClaim) Partition() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partition")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Partition indicates an expected call of Partition.
func (mr *ConsumerGroupClaimMockRecorder) Partition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*ConsumerGroupClaim)(nil).Partition))
}

// Topic mocks base method.
func (m *ConsumerGroupClaim) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *ConsumerGroupClaimMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*ConsumerGroupClaim)(nil).Topic))
}

// SyncProducer is a mock of SyncProducer interface.
type SyncProducer struct {
	ctrl     *gomock.Controller
	recorder *SyncProducerMockRecorder
	isgomock struct{}
}

// SyncProducerMockRecorder is the mock recorder for SyncProducer.
type SyncProducerMockRecorder struct {
	mock *SyncProducer
}

// NewSyncProducer creates a new mock instance.
func NewSyncProducer(ctrl *gomock.Controller) *SyncProducer {
	mock := &SyncProducer{ctrl: ctrl}
	mock.recorder = &SyncProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SyncProducer) EXPECT() *SyncProducerMockRecorder {
	return m.recorder
}

// AbortTxn mocks base method.
func (m *SyncProducer) AbortTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTxn indicates an expected call of AbortTxn.
func (mr *SyncProducerMockRecorder) AbortTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTxn", reflect.TypeOf((*SyncProducer)(nil).AbortTxn))
}

// AddMessageToTxn mocks base method.
func (m *SyncProducer) AddMessageToTxn(msg *sarama.ConsumerMessage, groupId string, metadata *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToTxn", msg, groupId, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageToTxn indicates an expected call of AddMessageToTxn.
func (mr *SyncProducerMockRecorder) AddMessageToTxn(msg, groupId, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToTxn", reflect.TypeOf((*SyncProducer)(nil).AddMessageToTxn), msg, groupId, metadata)
}

// AddOffsetsToTxn mocks base method.
func (m *SyncProducer) AddOffsetsToTxn(offsets map[string][]*sarama.PartitionOffsetMetadata, groupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffsetsToTxn", offsets, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOffsetsToTxn indicates an expected call of AddOffsetsToTxn.
func (mr *SyncProducerMockRecorder) AddOffsetsToTxn(offsets, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffsetsToTxn", reflect.TypeOf((*SyncProducer)(nil).AddOffsetsToTxn), offsets, groupId)
}

// BeginTxn mocks base method.
func (m *SyncProducer) BeginTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTxn indicates an expected call of BeginTxn.
func (mr *SyncProducerMockRecorder) BeginTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxn", reflect.TypeOf((*SyncProducer)(nil).BeginTxn))
}

// Close mocks base method.
func (m *SyncProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *SyncProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*SyncProducer)(nil).Close))
}

// CommitTxn mocks base method.
func (m *SyncProducer) CommitTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTxn indicates an expected call of CommitTxn.
func (mr *SyncProducerMockRecorder) CommitTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTxn", reflect.TypeOf((*SyncProducer)(nil).CommitTxn))
}

// IsTransactional mocks base method.
func (m *SyncProducer) IsTransactional() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactional")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTransactional indicates an expected call of IsTransactional.
func (mr *SyncProducerMockRecorder) IsTransactional() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactional", reflect.TypeOf((*SyncProducer)(nil).IsTransactional))
}

// SendMessage mocks base method.
func (m *SyncProducer) SendMessage(msg *sarama.ProducerMessage) (int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", msg)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendMessage indicates an expected call of SendMessage.
func (mr *SyncProducerMockRecorder) SendMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*SyncProducer)(nil).SendMessage), msg)
}

// SendMessages mocks base method.
func (m *SyncProducer) SendMessages(msgs []*sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages", msgs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessages indicates an expected call of SendMessages.
func (mr *SyncProducerMockRecorder) SendMessages(msgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*SyncProducer)(nil).SendMessages), msgs)
}

// TxnStatus mocks base method.
func (m *SyncProducer) TxnStatus() sarama.ProducerTxnStatusFlag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnStatus")
	ret0, _ := ret[0].(sarama.ProducerTxnStatusFlag)
	return ret0
}

// TxnStatus indicates an expected call of TxnStatus.
func (mr *SyncProducerMockRecorder) TxnStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnStatus", reflect.TypeOf((*SyncProducer)(nil).TxnStatus))
}
