// Code generated by MockGen. DO NOT EDIT.
// Source: golang.org/x/oauth2 (interfaces: TokenSource)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/oauth2.go -package=mock -mock_names=TokenSource=TokenSource golang.org/x/oauth2 TokenSource
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// TokenSource is a mock of TokenSource interface.
type TokenSource struct {
	ctrl     *gomock.Controller
	recorder *TokenSourceMockRecorder
	isgomock struct{}
}

// TokenSourceMockRecorder is the mock recorder for TokenSource.
type TokenSourceMockRecorder struct {
	mock *TokenSource
}

// NewTokenSource creates a new mock instance.
func NewTokenSource(ctrl *gomock.Controller) *TokenSource {
	mock := &TokenSource{ctrl: ctrl}
	mock.recorder = &TokenSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TokenSource) EXPECT() *TokenSourceMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *TokenSource) Token() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *TokenSourceMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*TokenSource)(nil).Token))
}
